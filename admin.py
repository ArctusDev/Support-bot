import os
from aiogram import Bot
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from database import get_all_tickets, update_ticket_status, get_ticket_by_id, set_user_role, get_user_role, \
    add_admin_user, set_user_state
from dotenv import load_dotenv
import logging


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")


bot = Bot(token=BOT_TOKEN)
router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
def admin_keyboard():
    keyboard = [
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
@router.message(lambda msg: msg.text.find("–í—Å–µ –∑–∞—è–≤–∫–∏") != -1)
async def view_tickets(message: types.Message):
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    if role != 'operator':
        return

    tickets = await get_all_tickets()
    if not tickets:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
    for ticket in tickets:
        text += f"üÜî {ticket['ticket_id']} | üë§ {ticket['user_id']} | üîñ {ticket['status']}\nüì© {ticket['text']}\n\n"

    await message.answer(text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π.", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    ))

# –í—ã–±–æ—Ä –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@router.message()
async def select_ticket(message: types.Message):
    print('called select_ticket')
    operator_id = message.from_user.id
    ticket_id = -1
    if message.text.isdigit():
        ticket_id = int(message.text)

    ticket = await get_ticket_by_id(ticket_id)
    if not ticket:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await update_ticket_status(ticket_id, "–≤ —Ä–∞–±–æ—Ç–µ")
    await set_user_state(operator_id, "working_on_ticket")  # –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞—è–≤–∫—É #{ticket_id}. –û–±—â–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ.", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_ticket_{ticket_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_from_ticket_{ticket_id}")]
        ]
    ))

    await bot.send_message(ticket["user_id"], f"üõ† –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} —Ç–µ–ø–µ—Ä—å –≤ —Ä–∞–±–æ—Ç–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")


@router.callback_query(lambda c: c.data.startswith("back_from_ticket_"))
async def back_from_ticket(callback: types.CallbackQuery):
    operator_id = callback.from_user.id
    ticket_id = callback.data.split("_")[2]

    await set_user_state(operator_id, "idle")  # üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ "idle"
    await callback.message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_keyboard())


# –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith("close_ticket_"))
async def close_ticket(callback: types.CallbackQuery):
    ticket_id = callback.data.split("_")[2]
    await update_ticket_status(ticket_id, "–∑–∞–∫—Ä—ã—Ç–∞")

    await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.")
    ticket = await get_ticket_by_id(ticket_id)
    await bot.send_message(ticket["user_id"], f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@router.message(lambda msg: msg.text.find('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞') != -1)
async def add_operator(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:")

@router.message()
async def process_add_operator(message: types.Message):
    print('called process_add_operator')
    user_id = int(message.text)

    user_role = await get_user_role(user_id)
    if user_role == "operator":
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä.")
        return

    if user_role is None:
        await add_admin_user(user_id, "operator")
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∏ —Å—Ç–∞–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await set_user_role(user_id, "operator")
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –æ–ø–µ—Ä–∞—Ç–æ—Ä.")

    await bot.send_message(user_id, "üéâ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∞–º–∏.")