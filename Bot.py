import asyncio
import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import logging
from dotenv import load_dotenv
from anty_ddos import RateLimitMiddleware
from database import (
    init,
    set_user_state,
    get_user_state,
    clear_user_state,
    set_user_category,
    get_user_category,
    create_ticket,
    get_user_tickets
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_CHAT = os.getenv("SUPPORT_CHAT")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.ERROR, filename="bot_errors.log", filemode="a",
                    format="%(asctime)s - %(levelname)s - %(message)s")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
VALID_CATEGORIES = {"error", "suggestion", "question"}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏")]
        ],
        resize_keyboard=True, one_time_keyboard=True
    )

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞
def category_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –û—à–∏–±–∫–∞", callback_data="category_error")],
        [InlineKeyboardButton(text="üí° –£–ª—É—á—à–µ–Ω–∏–µ", callback_data="category_suggestion")],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å", callback_data="category_question")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel (–æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏)
@router.message(Command("cancel"))
async def cancel_command(message: types.Message):
    await clear_user_state(message.from_user.id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("üö´ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
@router.message(lambda message: message.text and message.text.strip().startswith("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
async def help_command(message: types.Message):
    await message.answer("‚ÑπÔ∏è –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É?\n\n"
                         "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'\n"
                         "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
                         "3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n"
                         "4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
@router.message(lambda message: message.text and message.text.strip().startswith("üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"))
async def create_ticket_button(message: types.Message):
    await ask_category(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏"
@router.message(lambda message: message.text and message.text.strip().startswith("üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏"))
async def my_tickets(message: types.Message):
    user_id = message.from_user.id
    tickets = await get_user_tickets(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î

    if not tickets:
        await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    response = "üìú –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for ticket in tickets[:5]:
        response += f"üîπ #{ticket['id']} ({ticket['category']}): {ticket['text'][:50]}...\n"

    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_ticket (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏)
@router.message(Command("new_ticket"))
async def ask_category(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=category_keyboard())
    await set_user_state(message.from_user.id, "choosing_category")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(lambda c: c.data.startswith("category_"))
async def receive_category(callback_query: CallbackQuery):
    category = callback_query.data.split("_")[1]

    if category not in VALID_CATEGORIES:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return
    await set_user_category(callback_query.from_user.id, category)
    await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
@router.message()
async def save_ticket(message: types.Message):
    user_id = message.from_user.id
    state = await get_user_state(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if state != "writing_text":
        return

    category = await get_user_category(user_id) or "unknown"

    try:
        ticket_id = await create_ticket(user_id, message.text, category)
        await message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category.capitalize()}!")

        try:
            await bot.send_message(SUPPORT_CHAT, f"üì© –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id} ({category}):\n{message.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SUPPORT_CHAT ({SUPPORT_CHAT}): {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å–∞–ª)
@router.message()
async def fallback_handler(message: types.Message):
    await message.answer("‚ùì –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.", reply_markup=main_menu())


async def main():
    await init()
    dp.update.middleware(RateLimitMiddleware(limit=2.0))
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())