import asyncio
import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import logging
from dotenv import load_dotenv
from admin import router as admin_router
from admin import admin_keyboard
from database import (
    init, set_user_state, get_user_state, clear_user_state, set_user_category, get_user_category,
    create_ticket, get_user_tickets, get_operators, is_operator, get_ticket_by_id
)
from chat import chat_router

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO, filename="bot_errors.log", filemode="a",
                    format="%(asctime)s - %(levelname)s - %(message)s", encoding='utf-8')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

VALID_CATEGORIES = {"error", "suggestion", "question"}

def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        ],
        resize_keyboard=True, one_time_keyboard=True
    )

# @router.message()
# async def debug_handler(message: types.Message):
#     print(f"üîç bot.py –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")

def category_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –û—à–∏–±–∫–∞", callback_data="category_error")],
        [InlineKeyboardButton(text="üí° –£–ª—É—á—à–µ–Ω–∏–µ", callback_data="category_suggestion")],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å", callback_data="category_question")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ticket")]
    ])

@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if await is_operator(user_id):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –æ–ø–µ—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard())
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@router.callback_query(lambda c: c.data == "cancel_ticket")
async def cancel_ticket(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await clear_user_state(user_id)
    await callback_query.message.edit_text("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
    await callback_query.answer()

@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    await message.answer("‚ÑπÔ∏è –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É?\n\n"
                         "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'\n"
                         "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
                         "3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n"
                         "4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

@router.message(lambda message: message.text == "üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_ticket_button(message: types.Message):
    if await is_operator(message.from_user.id):
        await message.answer("–í—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=category_keyboard())
        await set_user_state(message.from_user.id, "choosing_category")

@router.callback_query(lambda c: c.data.startswith("category_"))
async def receive_category(callback_query: CallbackQuery):
    category = callback_query.data.split("_")[1]
    if category not in VALID_CATEGORIES:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return
    await set_user_category(callback_query.from_user.id, category)
    await set_user_state(callback_query.from_user.id, "writing_text")
    await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    await callback_query.answer()

@router.message(lambda message: asyncio.run(get_user_state(message.from_user.id)) == "writing_text")
async def save_ticket(message: types.Message):
    user_id = message.from_user.id
    category = await get_user_category(user_id) or "unknown"
    try:
        ticket_id = await create_ticket(user_id, message.text, category)
        await message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–∞!")
        await set_user_state(user_id, state='open')
        await clear_user_state(user_id)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_tickets(message: types.Message):
    user_id = message.from_user.id
    tickets = await get_user_tickets(user_id)
    if not tickets:
        await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    response = "üìú –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for ticket in tickets[:]:
        response += f"üîπ #{ticket['ticket_id']} ({ticket['category']}): {ticket['text'][:100]} {ticket['created_at']}\n"
    await message.answer(response)

# @router.message()
# async def fallback_handler(message: types.Message):
#     user_id = message.from_user.id
#     if await is_operator(user_id):
#         return
#     await message.answer("‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.", reply_markup=main_menu())

async def main():
    await init()
    dp.include_router(admin_router)
    dp.include_router(router)
    dp.include_router(chat_router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
