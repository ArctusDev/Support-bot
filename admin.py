import os
from aiogram import Bot
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from database import (
    get_all_tickets, update_ticket_status, get_ticket_by_id, set_user_role, get_user_role,
    add_admin_user, set_user_state, is_operator, get_user_state, init_db, clear_user_state
)
from dotenv import load_dotenv

admin_router = Router()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
DB_URL = os.getenv("DB_URL")

def admin_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")],
    ], resize_keyboard=True, one_time_keyboard=True)



@admin_router.message(lambda msg: msg.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def view_open_tickets(message: types.Message):
    user_id = message.from_user.id
    if not await is_operator(user_id):
        return
    tickets = await get_all_tickets()
    if not tickets:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    text = "üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    for ticket in tickets:
        text += f"üÜî {ticket['ticket_id']} | üë§ {ticket['user_id']}\nüì© {ticket['text'][:100]}\n\n"
    await message.answer(text)
    await set_user_state(user_id, f"select_ticket")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π:")


@admin_router.callback_query(lambda c: c.data.startswith("close_ticket_"))
async def close_ticket(callback: types.CallbackQuery):
    ticket_id = int(callback.data.split("_")[2])
    ticket = await get_ticket_by_id(ticket_id)
    operator_id = callback.from_user.id
    user_id = ticket["user_id"]
    await update_ticket_status(ticket_id, "–∑–∞–∫—Ä—ã—Ç–∞")
    await set_user_state(operator_id, "idle")
    await set_user_state(user_id, "idle")

    await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.")
    await bot.send_message(user_id,
                           f"üõ† –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.")


@admin_router.message(lambda msg: msg.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def add_operator_request(message: types.Message):
    print('–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')
    operator_id = message.from_user.id
    if not await is_operator(operator_id):
        return
    await set_user_state(operator_id, "wating_for_operator_id")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@admin_router.message(lambda msg: msg.text.isdigit())
async def confirm_operator(message: types.Message):
    operator_id = message.from_user.id
    print(operator_id)
    state = await get_user_state(operator_id)
    if state == "wating_for_operator_id":
        target_user_id = message.text.strip()

        if not target_user_id.isdigit():
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
            return

        target_user_id = int(target_user_id)
        user_role = await get_user_role(target_user_id)
        if not await get_user_role(target_user_id):
            await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
            return

        if user_role == "operator":
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            await set_user_state(operator_id, "idle")
            return

        # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_user_state(operator_id, f"confirm_operator_{target_user_id}")

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_operator_{target_user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operator")]
        ])

        await message.answer(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º?",
            reply_markup=keyboard, parse_mode="Markdown"
        )
    elif state == "select_ticket":
        operator_id = message.from_user.id
        ticket_id = int(message.text)
        ticket = await get_ticket_by_id(ticket_id)
        print(ticket["user_id"])
        if not ticket:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        await update_ticket_status(ticket_id, "–≤ —Ä–∞–±–æ—Ç–µ")
        await set_user_state(operator_id, f"working_on_ticket_{ticket_id}")
        user_id = ticket["user_id"]
        await set_user_state(operator_id, f"chating_{ticket_id}")
        await set_user_state(user_id, f"chating_{ticket_id}")

        conn = await init_db()
        await conn.execute("UPDATE tickets SET operator_id = $1 WHERE ticket_id = $2", operator_id, ticket_id)
        await conn.close()

        await message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞—è–≤–∫—É #{ticket_id}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É', –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_ticket_{ticket_id}")]
            ])
        )

        await bot.send_message(user_id,
                               f"üõ† –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} —Ç–µ–ø–µ—Ä—å –≤ —Ä–∞–±–æ—Ç–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    else:
        user_id = message.from_user.id
        if await is_operator(user_id):
            return
        state = await get_user_state(user_id)
        if not state.startswith("chating_"):
            await message.answer("‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.")

@admin_router.callback_query(lambda c: c.data.startswith("confirm_operator_"))
async def process_operator_confirmation(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    admin_id = callback.from_user.id
    target_user_id = int(callback.data.split("_")[2])

    user_role = await get_user_role(target_user_id)

    if user_role is None:
        await add_admin_user(target_user_id, "operator")
    else:
        await set_user_role(target_user_id, "operator")

    await set_user_state(target_user_id, "idle")  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await set_user_state(admin_id, "idle")  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ç–µ–ø–µ—Ä—å –æ–ø–µ—Ä–∞—Ç–æ—Ä.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(
        target_user_id,
        "üéâ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∞–º–∏.",
        reply_markup=admin_keyboard()
    )


@admin_router.callback_query(lambda c: c.data == "cancel_operator")
async def cancel_operator(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    admin_id = callback.from_user.id
    await clear_user_state(admin_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")