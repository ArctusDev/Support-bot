import asyncio
import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup,
                           KeyboardButton)
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
import logging
from dotenv import load_dotenv
from setuptools.command.build_ext import use_stubs

from admin import admin_router
from admin import admin_keyboard
from anty_ddos import WriteLimit
from database import (
    init, set_user_state, get_user_state, clear_user_state, set_user_category, get_user_category,
    create_ticket, get_user_tickets, is_operator
)
from chat import chat_router

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CHANNEL_URL = os.getenv("CHANNEL_URL")

logging.basicConfig(level=logging.INFO, filename="bot_errors.log", filemode="a",
                    format="%(asctime)s - %(levelname)s - %(message)s", encoding='utf-8')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

VALID_CATEGORIES = {"error", "suggestion", "question"}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def is_user_subscribed(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        print(CHANNEL_ID)
        print(chat_member)
        return chat_member.status in ["member", "administrator", "creator"]
    except TelegramBadRequest:
        print('FALSE')
        return False

def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        ],
        resize_keyboard=True, one_time_keyboard=True
    )

def category_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –û—à–∏–±–∫–∞", callback_data="category_error")],
        [InlineKeyboardButton(text="üí° –£–ª—É—á—à–µ–Ω–∏–µ", callback_data="category_suggestion")],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å", callback_data="category_question")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ticket")]
    ])

@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id

    if not await is_user_subscribed(user_id):
        await message.answer(
            "üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_URL}")],
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="check_subscription")]
            ])
        )
        return  # –ù–µ –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è)

    if await is_operator(user_id):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –æ–ø–µ—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard())
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    if await is_user_subscribed(user_id):
        await callback_query.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        await start_command(callback_query.message)    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ start
    else:
        await callback_query.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)


@router.callback_query(lambda c: c.data == "cancel_ticket")
async def cancel_ticket(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await clear_user_state(user_id)
    await callback_query.message.edit_text("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
    await callback_query.answer()

@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    user_id = message.from_user.id
    state = await get_user_state(user_id)
    print(state)
    if state.startswith("chating_"):
        await message.answer("‚ö†Ô∏è–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        return
    await message.answer("‚ÑπÔ∏è –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É?\n\n"
                         "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'\n"
                         "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
                         "3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n"
                         "4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=main_menu())

@router.message(lambda message: message.text == "üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_ticket_button(message: types.Message):
    user_id = message.from_user.id
    state = await get_user_state(user_id)
    print(state)
    if state.startswith("chating_"):
        await message.answer("‚ö†Ô∏è–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=category_keyboard())
    await set_user_state(message.from_user.id, "choosing_category")

@router.callback_query(lambda c: c.data.startswith("category_"))
async def receive_category(callback_query: CallbackQuery):
    category = callback_query.data.split("_")[1]
    if category not in VALID_CATEGORIES:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return
    await set_user_category(callback_query.from_user.id, category)
    await set_user_state(callback_query.from_user.id, "writing_text")
    await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    await callback_query.answer()

@router.message(lambda message: asyncio.run(get_user_state(message.from_user.id)) == "writing_text")
async def save_ticket(message: types.Message):
    user_id = message.from_user.id
    if message.text:
        text = message.text.strip()
    elif message.caption:
        text = message.caption.strip()
    else:
        text = ""

    print(text)

    if text == 'üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏' or text == 'üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' or text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞")
        await set_user_state(user_id, state='idle')
        return
    if message.animation:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞, –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏")
        await set_user_state(user_id, state='idle')
        return
    if message.audio:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞, –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞—É–¥–∏–æ")
        await set_user_state(user_id, state='idle')
        return

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ + –≤–∏–¥–µ–æ)
    if message.media_group_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.")
        await set_user_state(user_id, state='idle')
        return
    # –ï—Å–ª–∏ —Ç–∞–º —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if text and message.photo:
        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        text += f". –§–æ—Ç–æ: {file_url}"
    elif text and message.video:
        file_id = message.video.file_id
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        text += f". –í–∏–¥–µ–æ: {file_url}"
    elif text and message.document:
        file_id = message.document.file_id
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        text += f". –î–æ–∫—É–º–µ–Ω—Ç: {file_url}"
    elif message.document:
        file_id = message.document.file_id
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        text = f"–î–æ–∫—É–º–µ–Ω—Ç: {file_url}"
    elif message.video:
        file_id = message.video.file_id
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        text = f"–í–∏–¥–µ–æ-–∑–∞—è–≤–∫–∞: {file_url}"
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        text = f"–§–æ—Ç–æ-–∑–∞—è–≤–∫–∞: {file_url}"

    if not text:
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∑–∞—è–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤.")
        return
    category = await get_user_category(user_id) or "unknown"
    try:
        ticket_id = await create_ticket(user_id, text, category)
        await message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–∞!")
        await set_user_state(user_id, state='open')
        await clear_user_state(user_id)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "üìú –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_tickets(message: types.Message):
    user_id = message.from_user.id
    tickets = await get_user_tickets(user_id)
    if not tickets:
        await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=main_menu())
        return
    response = "üìú –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for ticket in tickets[:]:
        response += f"üîπ #{ticket['ticket_id']} ({ticket['category']}): {ticket['text'][:100]} {ticket['created_at']}\n"
    await message.answer(response)


async def main():
    await init()
    router.message.middleware(WriteLimit(limit=3.0))

    dp.include_router(router)
    dp.include_router(admin_router)
    dp.include_router(chat_router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
