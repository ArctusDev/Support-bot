import os
from aiogram import Bot
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from database import (
    get_all_tickets, update_ticket_status, get_ticket_by_id, set_user_role, get_user_role,
    add_admin_user, set_user_state, is_operator, get_user_state
)
from dotenv import load_dotenv

router = Router()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)

def admin_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")],
    ], resize_keyboard=True, one_time_keyboard=True)


@router.message(lambda msg: msg.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def view_open_tickets(message: types.Message):
    user_id = message.from_user.id
    if not await is_operator(user_id):
        return
    tickets = await get_all_tickets()
    if not tickets:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    text = "üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    for ticket in tickets:
        text += f"üÜî {ticket['ticket_id']} | üë§ {ticket['user_id']}\nüì© {ticket['text'][:100]}\n\n"

    await message.answer(text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π:")


@router.message(lambda msg: msg.text.isdigit())
async def select_ticket(message: types.Message):
    operator_id = message.from_user.id
    ticket_id = int(message.text)

    ticket = await get_ticket_by_id(ticket_id)
    if not ticket:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await update_ticket_status(ticket_id, "–≤ —Ä–∞–±–æ—Ç–µ")
    await set_user_state(operator_id, f"working_on_ticket_{ticket_id}")
    user_id = ticket["user_id"]
    await set_user_state(operator_id, f"chating_{ticket_id}")
    await set_user_state(user_id, f"chating_{ticket_id}")
    await message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞—è–≤–∫—É #{ticket_id}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
        "–ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É', –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_ticket_{ticket_id}")]
        ])
    )

    await router.bot.send_message(user_id,
                                  f"üõ† –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} —Ç–µ–ø–µ—Ä—å –≤ —Ä–∞–±–æ—Ç–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")


@router.callback_query(lambda c: c.data.startswith("close_ticket_"))
async def close_ticket(callback: types.CallbackQuery):
    ticket_id = int(callback.data.split("_")[2])
    operator_id = callback.from_user.id

    ticket = await get_ticket_by_id(ticket_id)
    await update_ticket_status(ticket_id, "–∑–∞–∫—Ä—ã—Ç–∞")
    await set_user_state(operator_id, "idle")

    await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.")
